import Head from 'next/head';
import { Provider } from 'react-redux';
import GlobalStore from '@app/store';
import MarqueeContainer from './features/Marquee/MarqueeContainer';
import { mobileBrowserCheck, smallWindowCheck } from './shared/globalUtils';
import styles from './styles/Home.module.scss';
import { Box } from '@mui/material';
import { useIsSsr } from 'shared/customHooks';
import { appInitialState, setPortraitState } from '@app/appSlice';
import { useCallback, useEffect, useState } from 'react';
import { useDispatch } from '@app/reduxHooks';

const Home = () => {
  const [smileLoaded, setSmileLoaded] = useState(false);
  const dispatch = useDispatch();

  useEffect(() => {
    const portraitEventListener = (event: MediaQueryListEvent) => {
      dispatch(setPortraitState(event.matches));
    };
    const mediaQueryList = window.matchMedia('(orientation: portrait)');
    mediaQueryList.addEventListener('change', portraitEventListener);
    return () =>
      mediaQueryList.removeEventListener('change', portraitEventListener);
  }, [dispatch]);

  const smileCallback = useCallback(() => {
    setSmileLoaded(true);
  }, []);

  return (
    <Box className={styles.container}>
      <Head>
        <title>James Hrivnak</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Box
          id="homeContainer"
          sx={{
            display: 'flex',
            flexDirection: 'column',
            margin: '0 auto',
            width: '75%',
          }}
        >
          <Box
            id="about-me-root"
            sx={{ height: '90vh', paddingBottom: '5%' }}
            data-name="About Me"
          >
            <MarqueeContainer smileCallback={smileCallback} />
          </Box>
        </Box>
      </main>

      <footer className={styles.footer}></footer>
    </Box>
  );
};

const App = (props: {}) => {
  const isSsr = useIsSsr();
  let appInitialProps = {};
  if (!isSsr) {
    appInitialProps = {
      mobileBrowserState: mobileBrowserCheck(),
      smallWindowState: smallWindowCheck(),
    };
  }
  GlobalStore.prototype.configureGlobalStore({
    app: {
      ...appInitialState,
      ...appInitialProps,
    },
  });
  return (
    <Provider store={GlobalStore.prototype.getStore()}>
      <Home />
    </Provider>
  );
};

export default App;
